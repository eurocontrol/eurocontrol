[{"path":"https://eurocontrol.github.io/eurocontrol/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 EUROCONTROL Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Enrico Spinielli. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Spinielli E (2024). eurocontrol: Helper functions EUROCONTROL useRs. R package version 0.1.9, https://github.com/eurocontrol/eurocontrol, https://eurocontrol.github.io/eurocontrol/.","code":"@Manual{,   title = {eurocontrol: Helper functions for EUROCONTROL useRs},   author = {Enrico Spinielli},   year = {2024},   note = {R package version 0.1.9, https://github.com/eurocontrol/eurocontrol},   url = {https://eurocontrol.github.io/eurocontrol/}, }"},{"path":"https://eurocontrol.github.io/eurocontrol/index.html","id":"the-eurocontrol-package","dir":"","previous_headings":"","what":"Helper functions for EUROCONTROL useRs","title":"Helper functions for EUROCONTROL useRs","text":"goal eurocontrol package provide helper functions Agency’s employees setup, data retrieval internal databases, … .","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper functions for EUROCONTROL useRs","text":"can install development version eurocontrol package GitHub : NOTE: package (hiddenly) depends ROracle package, please installed according guidelines published .","code":"# install.packages(\"devtools\") devtools::install_github(\"eurocontrol/eurocontrol\")"},{"path":"https://eurocontrol.github.io/eurocontrol/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Helper functions for EUROCONTROL useRs","text":"functions package access data EUROCONTROL’s internal Oracle schemes (maintained PRISME group.) code relies relevant credentials stored specifically named environment variables. pattern environment variable names XXXX something like PRU_DEV, PRU_PROD, … defined AIU. course accounts/schemes access underlying tables can used encoded custom environment variables following pattern . details tables accessed can found relevant functions documentation.","code":"XXXX_DBNAME  XXXX_PWD XXXX_USR"},{"path":"https://eurocontrol.github.io/eurocontrol/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Helper functions for EUROCONTROL useRs","text":"typical use case retrieve list flights operated area managed EUROCONTROL’s Network Manager. example flight list March 2023 can run (need access setup PRU_DEV schema):","code":"library(eurocontrol)  flights_tidy(wef = \"2023-01-01\", til = \"2023-04-01\")"},{"path":"https://eurocontrol.github.io/eurocontrol/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Helper functions for EUROCONTROL useRs","text":"order build relevant pkgdown web pages, execute following code:","code":"# How to build the pakgdown from behind proxied Internet library(withr) library(pkgdown)  with_options(list(pkgdown.internet = FALSE),              build_site())"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aircraft_model.html","id":null,"dir":"Reference","previous_headings":"","what":"ICAO's Manufacturer codes — aircraft_model","title":"ICAO's Manufacturer codes — aircraft_model","text":"data frame following fields model_full_name model full name, e.g. \"-320neo\". manufacturer_code manufacturer's code, e.g. \"AIRBUS\". designator model's designator, e.g. \"A20N\" last_updated date data last updated, e.g. \"2023-05-19\".","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aircraft_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICAO's Manufacturer codes — aircraft_model","text":"","code":"aircraft_model"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aircraft_model.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICAO's Manufacturer codes — aircraft_model","text":"object class tbl_df (inherits tbl, data.frame) 10438 rows 4 columns.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aircraft_type.html","id":null,"dir":"Reference","previous_headings":"","what":"ICAO's Aircraft types — aircraft_type","title":"ICAO's Aircraft types — aircraft_type","text":"data frame following fields designator aircraft type designator, e.g. \"A310\". aircraft_description aircraft description, e.g. \"LandPlane\". description aircraft , e.g. \"\". wtc aircraft wake turbulence category, e.g. \"M\". engine_count number pf engines, e.g. \"2\". Note: number unfortunately, one model encoded C engine_type engine type, e.g. \"Jet\". last_updated date data last updated, e.g. \"2023-05-19\".","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aircraft_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICAO's Aircraft types — aircraft_type","text":"","code":"aircraft_type"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aircraft_type.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICAO's Aircraft types — aircraft_type","text":"object class tbl_df (inherits tbl, data.frame) 2719 rows 7 columns.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a reference to the Airlines table — airlines_tbl","title":"Return a reference to the Airlines table — airlines_tbl","text":"returned dplyr::tbl() referencing airlines table PRISME. can use dplyr/dbplyr verbs filter, join, ... datasets.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a reference to the Airlines table — airlines_tbl","text":"","code":"airlines_tbl(conn = NULL)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a reference to the Airlines table — airlines_tbl","text":"conn Database connection instantiate default one.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a reference to the Airlines table — airlines_tbl","text":"dplyr::tbl() referencing Oracle table airlines.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return a reference to the Airlines table — airlines_tbl","text":"need either provide connection conn access PRU_DEV.V_COVID_DIM_AO go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a reference to the Airlines table — airlines_tbl","text":"","code":"if (FALSE) { arl <- airlines_tbl() # other operations on arl, i.e. filtering, # followed by a collect() to retrieve the concrete data frame arl_filtered <- arl |>    dplyr::filter(AO_ISO_CTRY_CODE == \"IT\") |>    collect()  # NOTE: you can reuse the connection for other API calls conn <- arl$src$con  # other ops requiring conn # ...  # IMPORTANT: close the DB connection DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Airline info including group affiliation — airlines_tidy","title":"Airline info including group affiliation — airlines_tidy","text":"Airline info including group affiliation","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Airline info including group affiliation — airlines_tidy","text":"","code":"airlines_tidy(conn = NULL)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Airline info including group affiliation — airlines_tidy","text":"conn Optional connection PRU_DEV schema.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Airline info including group affiliation — airlines_tidy","text":"dplyr::tbl() following columns: AO_CODE: ICAO Airline Designator, .e. 'OAL' AO_NAME: airline's name, .e. 'Olympic' AO_GRP_CODE: airline's affiliation group code, .e. 'AEE_GRP' AO_GRP_NAME: airline's affiliation group, .e. 'AEGEAN Group' AO_ISO_CTRY_CODE: ISO2C code airline's country, .e. 'GR' EU: (character) whether airlines EUROCONTROL's Member State (full, comprehensive transition plus Kosovo), .e. 'TRUE'","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Airline info including group affiliation — airlines_tidy","text":"need either provide connection conn access PRUDEV.V_COVID_DIM_AO go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airlines_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Airline info including group affiliation — airlines_tidy","text":"","code":"if (FALSE) { arls <- airlines_tidy() # other operations on arls, i.e. filtering, # followed by a collect() to retrieve the concrete data frame arls_filtered <- arls |>    filter(stringr::str_starts(\"A\")) |>    collect()  # NOTE: you can reuse the connection for other API calls conn <- arls$src$con  # other ops requiring conn # ...  # IMPORTANT: close the DB connection DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airports_oa.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve latest airport list from OurAirports — airports_oa","title":"retrieve latest airport list from OurAirports — airports_oa","text":"retrieve latest airport list OurAirports","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airports_oa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve latest airport list from OurAirports — airports_oa","text":"","code":"airports_oa()"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airports_oa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve latest airport list from OurAirports — airports_oa","text":"data frame","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airports_oa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve latest airport list from OurAirports — airports_oa","text":"","code":"if (FALSE) { apts <- airports_oa() }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profile_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a reference to the Airspace Profile table — airspace_profile_tbl","title":"Return a reference to the Airspace Profile table — airspace_profile_tbl","text":"returned dplyr::tbl() referencing airspace profiles table PRISME. can use dplyr/dbplyr verbs filter, join, ... datasets.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profile_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a reference to the Airspace Profile table — airspace_profile_tbl","text":"","code":"airspace_profile_tbl(conn = NULL)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profile_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a reference to the Airspace Profile table — airspace_profile_tbl","text":"conn Database connection instantiate default one.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profile_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a reference to the Airspace Profile table — airspace_profile_tbl","text":"dplyr::tbl() referencing Oracle table airspace profiles.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profile_tbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return a reference to the Airspace Profile table — airspace_profile_tbl","text":"need either provide connection conn access FSD.ALL_FT_ASP_PROFILE go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profile_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a reference to the Airspace Profile table — airspace_profile_tbl","text":"","code":"if (FALSE) { pp <- airspace_profile_tbl() # other operations on pp, i.e. filtering, # followed by a collect() to retrieve the concrete data frame # IMPORTANT: close the DB connection when done DBI::dbDisconnect(pp$src$con)  # if you use a DB connection for many different APIs conn <- eurocontrol::db_connection(\"PRU_DEV\") pp <- airspace_profile_tbl(conn = conn)  # ... do something else with conn # ... # then manually close the connection to the DB DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profiles_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","title":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","text":"returned dplyr::tbl() includes segments scheduled non-scheduled flights temporally intersecting right-opened interval [wef, til). General aviation, State, military sensitive flight excluded.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profiles_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","text":"","code":"airspace_profiles_tidy(   conn = NULL,   wef,   til,   airspace = \"FIR\",   profile = \"CTFM\" )"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profiles_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","text":"conn Database connection instantiate default one. wef EFfect date (included) Zulu time format recognized lubridate::as_datetime() til unTILl date (excluded) Zulu time format recognized lubridate::as_datetime() airspace type airspace (default: 'FIR'), one : 'FIR' (Flight Information Region) 'NAS' (National Airspace) 'AUA' (ATC Unit Airspace) 'ES' (Elementary Sector) profile model trajectory profile (default: 'CTFM'), one : 'FTFM', Filed Tactical Flight Model 'RTFM', Regulated Tactical Flight Model 'CTFM', Current Tactical Flight Model 'CPF', Correlated Position reports Flight 'DCT', Direct route 'SCR', Shortest Constrained Route 'SRR', Shortest RAD restrictions applied Route 'SUR', Shortest Unconstrained Route","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profiles_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","text":"dplyr::tbl() following columns ID: called SAM ID, used internally PRISME SEQ_ID: sequence number segment relevant airspace profile ENTRY_TIME: time entry relevant airspace ENTRY_LON:  longitude entry relevant airspace ENTRY_LAT: latitude entry relevant airspace ENTRY_FL: flight level entry relevant airspace EXIT_TIME: time exit relevant airspace EXIT_LON: longitude exit relevant airspace EXIT_LAT: latitude exit relevant airspace EXIT_FL: flight level exit relevant airspace AIRSPACE_ID: airspace ID AIRSPACE_TYPE: airspace type per airspace input parameter MODEL_TYPE: trajectory model per profile input parameter","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profiles_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","text":"need either provide connection conn access noted airspace_profile_tbl() flights_tidy() go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/airspace_profiles_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide all airspace profile segments intersecting an interval of interest — airspace_profiles_tidy","text":"","code":"if (FALSE) { ps <- airspace_profiles_tidy(wef = \"2023-01-01\", til = \"2023-04-01\") # IMPORTANT: always close the DB connection when done DBI::dbDisconnect(ps$src$con)  # if you re-use DB connections conn <- eurocontrol::db_connection(\"PRU_DEV\") ps <- airspace_profiles_tidy(conn = conn)  # ... do something else with conn # ... # then manually close the connection to the DB DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","title":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","text":"returned dplyr::tbl() referencing airport operator data flow table PRISME. can use dplyr/dbplyr verbs filter, join, ... datasets.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","text":"","code":"aodf_tbl(conn = NULL)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","text":"conn Database connection instantiate default one.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","text":"dplyr::tbl() referencing Oracle table airport operator data flow.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","text":"need either provide connection conn access SWH_FCT.FAC_APDS_FLIGHT_IR691 go default uses PRU_ATMAP establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a reference to the Airport Operator Data Flow table — aodf_tbl","text":"","code":"if (FALSE) { aodf <- aodf_tbl() # ... # IMPORTANT: close the DB connection when done with `aodf` DBI::dbDisconnect(aodf$src$con) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a clean airport operator data flow list in an interval — aodf_tidy","title":"Extract a clean airport operator data flow list in an interval — aodf_tidy","text":"returned dplyr::tbl() includes movements information interval [wef, til). NOTE: can cover ONE month time","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a clean airport operator data flow list in an interval — aodf_tidy","text":"","code":"aodf_tidy(conn = NULL, wef, til)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a clean airport operator data flow list in an interval — aodf_tidy","text":"conn Database connection instantiate default one. wef EFfect date (included) Zulu time format recognized lubridate::as_datetime() til unTILl date (excluded) Zulu time format recognized lubridate::as_datetime()","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a clean airport operator data flow list in an interval — aodf_tidy","text":"dplyr::tbl() following columns: APDS_ID: airport operator dataflow unique record id. ID: called SAM ID, used internally PRISME AP_C_FLTID: flight identifier (aource Airport) AP_C_FLTRUL: sets regulations flight operated . Possible values : IFR IFR VFR VFR NA unknown AP_C_REG: aircraft registration (spaces, dashes, ... stripped), e.g. GEUUU. ADEP_ICAO: (ICAO code ) Aerodrome DEParture (source airport). ADES_ICAO: (ICAO code ) Aerodrome DEStination  (source airport). SRC_PHASE: flight phase. DEP=departure, ARR=arrival. MVT_TIME_UTC: (best available) movement time (takeoff SRC_PHASE = DEP, landing SRC_PHASE = ARR). BLOCK_TIME_UTC: Block time (-block SRC_PHASE = DEP, -block SRC_PHASE = ARR). SCHED_TIME_UTC: scheduled time (departure SRC_PHASE = DEP, arrival SRC_PHASE = ARR; source airport). ARCTYP: (best available) ICAO code aircraft type, example A21N Airbus A321neo. AP_C_RWY: Runway ID (departure SRC_PHASE = DEP, arrival SRC_PHASE = ARR; source airport). AP_C_STND: Stand ID (departure SRC_PHASE = DEP, arrival SRC_PHASE = ARR; source airport). C40_CROSS_TIME: time first (last) crossing 40 NM ARP departure (arrival). C40_CROSS_LAT: latitude first (last) crossing 40 NM ARP departure (arrival). C40_CROSS_LON: longitude first (last) crossing 40 NM ARP departure (arrival). C40_CROSS_FL: flight level first (last) crossing 40 NM ARP departure (arrival). C40_BEARING: bearing first (last) crossing 40 NM ARP departure (arrival). C100_CROSS_TIME: time first (last) crossing 100 NM ARP departure (arrival). C100_CROSS_LAT: latitude first (last) crossing 100 NM ARP departure (arrival). C100_CROSS_LON: longitude first (last) crossing 100 NM ARP departure (arrival). C100_CROSS_FL: flight level first (last) crossing 100 NM ARP departure (arrival). C100_BEARING: bearing first (last) crossing 100 NM ARP departure (arrival).","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract a clean airport operator data flow list in an interval — aodf_tidy","text":"need either provide connection conn access SWH_FCT.FAC_APDS_FLIGHT_IR691, go default uses PRU_ATMAP establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/aodf_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a clean airport operator data flow list in an interval — aodf_tidy","text":"","code":"if (FALSE) { my_aodf <- aodf_tidy(wef = \"2023-01-01\", til = \"2023-01-02\") # ... DBI::dbDisconnect(my_aodf$src$con) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/db_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide a connection to the relevant Oracle database — db_connection","title":"Provide a connection to the relevant Oracle database — db_connection","text":"Provide connection relevant Oracle database","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/db_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide a connection to the relevant Oracle database — db_connection","text":"","code":"db_connection(schema = \"PRU_PROD\")"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/db_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide a connection to the relevant Oracle database — db_connection","text":"schema Oracle DB schema connect .","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/db_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide a connection to the relevant Oracle database — db_connection","text":"connection database (specifically implementation DBI::DBIConnection Oracle database.)","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/db_connection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Provide a connection to the relevant Oracle database — db_connection","text":"schema fact prefix environment variables credentials stored, like <schema>_USR, <schema>_PWD <schema>_DBNAME. Possible values schema PRU_PROD, PRU_DEV, PRU_TEST, ...","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/db_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide a connection to the relevant Oracle database — db_connection","text":"","code":"if (FALSE) { conn <- db_connection() # ... perform other API operations re-using the same connection # ... DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/eurocontrol-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eurocontrol: Helper functions for EUROCONTROL useRs — eurocontrol-package","title":"eurocontrol: Helper functions for EUROCONTROL useRs — eurocontrol-package","text":"helper functions package designed make easy, homogeneus transparent common tasks usually needed data analysts useRs EUROCONTROL.","code":""},{"path":[]},{"path":"https://eurocontrol.github.io/eurocontrol/reference/eurocontrol-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eurocontrol: Helper functions for EUROCONTROL useRs — eurocontrol-package","text":"Maintainer: Enrico Spinielli enrico.spinielli@eurocontrol.int (ORCID) contributors: EUROCONTROL [copyright holder, funder]","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_airspace_profiles_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","title":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","text":"returned dplyr::tbl() includes scheduled non-scheduled flights whose airspace segments temporally intersecting right-opened interval [wef, til). General aviation, State, military sensitive flight excluded.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_airspace_profiles_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","text":"","code":"flights_airspace_profiles_tidy(   conn = NULL,   wef,   til,   airspace = \"FIR\",   profile = \"CTFM\" )"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_airspace_profiles_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","text":"conn Database connection instantiate default one. wef EFfect date (included) Zulu time format recognized lubridate::as_datetime() til unTILl date (excluded) Zulu time format recognized lubridate::as_datetime() airspace type airspace (default: 'FIR'), one : 'FIR' (Flight Information Region) 'NAS' (National Airspace) 'AUA' (ATC Unit Airspace) 'ES' (Elementary Sector) profile model trajectory profile (default: 'CTFM'), one : 'FTFM', Filed Tactical Flight Model 'RTFM', Regulated Tactical Flight Model 'CTFM', Current Tactical Flight Model 'CPF', Correlated Position reports Flight 'DCT', Direct route 'SCR', Shortest Constrained Route 'SRR', Shortest RAD restrictions applied Route 'SUR', Shortest Unconstrained Route","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_airspace_profiles_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","text":"dplyr::tbl() columns flights_tidy()","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_airspace_profiles_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","text":"need either provide connection conn access noted airspace_profile_tbl() flights_tidy() go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_airspace_profiles_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the flights list for the airspace profile segments intersecting an interval of interest — flights_airspace_profiles_tidy","text":"","code":"if (FALSE) { aa <- flights_airspace_profiles_tidy(wef = \"2023-01-01\", til = \"2023-04-01\")  # if you re-use DB connections conn <- eurocontrol::db_connection(\"PRU_DEV\") flights_airspace_profiles_tidy(conn = conn,                                wef = \"2023-01-01\",                                til = \"2023-04-01\")  # ... do something else with conn # ... # then manually close the connection to the DB DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a reference to the Flights table — flights_tbl","title":"Return a reference to the Flights table — flights_tbl","text":"returned dplyr::tbl() referencing flights table PRISME. can use dplyr/dbplyr verbs filter, join, ... datasets.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a reference to the Flights table — flights_tbl","text":"","code":"flights_tbl(conn = NULL)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a reference to the Flights table — flights_tbl","text":"conn Database connection instantiate default one.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a reference to the Flights table — flights_tbl","text":"dplyr::tbl() referencing Oracle table flights.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return a reference to the Flights table — flights_tbl","text":"need either provide connection conn access SWH_FCT.FAC_FLIGHT go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a reference to the Flights table — flights_tbl","text":"","code":"if (FALSE) { flt <- flights_tbl() # other operations on flt, i.e. filtering, # followed by a collect() to retrieve the concrete data frame flt_filtered <- flt |>    filter(TO_DATE(\"2023-06-01 10:00\", \"YYYY-MM-DD HH24:MI\") <= IOBT,                   IOBT < TO_DATE(\"2023-06-02 10:30\", \"YYYY-MM-DD HH24:MI\")) |>    collect()   # NOTE: you can reuse the connection for other API calls conn <- flt$src$con  # other ops requiring conn # ...  # IMPORTANT: close the DB connection DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a clean flights list in an interval — flights_tidy","title":"Extract a clean flights list in an interval — flights_tidy","text":"returned dplyr::tbl() includes scheduled non-scheduled flight departing right-opened interval [wef, til). Defaults values assure General aviation, State, military sensitive flight excluded. can retrieved via function call arguments case need.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a clean flights list in an interval — flights_tidy","text":"","code":"flights_tidy(   conn = NULL,   wef,   til,   icao_flt_types = c(\"S\", \"N\"),   ids = NULL,   include_sensitive = FALSE,   include_military = FALSE,   include_head = FALSE )"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a clean flights list in an interval — flights_tidy","text":"conn Database connection instantiate default one. wef EFfect date (included) Zulu time format recognized lubridate::as_datetime() til unTILl date (excluded) Zulu time format recognized lubridate::as_datetime() icao_flt_types types flights described ICAO_FLT_TYPE, default c('S', 'N'), NULL includes notwithstanding argument options. including military via include_military either pass NULL make sure 'M' included ids list IDs (aka SAM ID) return, default NULL flights include_sensitive include sensitive flights, default FALSE include_military include military flights, default FALSE include_head include Head State flights, default FALSE","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a clean flights list in an interval — flights_tidy","text":"dplyr::tbl() following columns (grouped flight details, aircraft info, aircraft operator info operational details):","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"flight-details","dir":"Reference","previous_headings":"","what":"Flight details","title":"Extract a clean flights list in an interval — flights_tidy","text":"FLT_UID: flight unique id. ID: called SAM ID, used internally PRISME AIRCRAFT_ID: callsign relevant flight, e.g. BAW6VB. LOBT: Last received -Block Time. IOBT: Initial -Block Time. FLT_RULES (see FPL Item 8): sets regulations flight operated . Possible values : IFR V VFR Y first IFR thereafter VFR Z first VFR thereafter IFR ICAO_FLT_TYPE (see FPL Item 8): flight type. Possible values: S scheduled air service N non-scheduled air service G general aviation M military (note: filtered ) X preceding categories ADEP: ICAO code Aerodrome DEParture NAME_ADEP: (AIU) name departing airport COUNTRY_CODE_ADEP: ISO 2-alpha country code ADEP COUNTRY_NAME_ADEP: country name ADEP ADES: ICAO code Aerodrome DEStination NAME_ADES: (AIU) name airport COUNTRY_CODE_ADES: ISO 2-alpha country code ADES COUNTRY_NAME_ADES: country name ADES RULE_NAME: market segment type defined Market Segment Rules, can : “Mainline” “Regional” “Low-Cost” “Business Aviation” “-Cargo” “Charter” (Non-Scheduled) “Military” “” \"classified\" SENSITIVE: 'Y' sensitive SPECIAL_EXEMPT: reasons special handling ATS. One : \"AEAP\" ATFM exemption approved \"EMER\" emergency \"FIRE\" fire fighting \"HEAD\" flights Head State status \"MEDE\" medical evacuation \"NEXE\" exempted \"SERE\" search & rescue","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"aircraft-info","dir":"Reference","previous_headings":"","what":"Aircraft info","title":"Extract a clean flights list in an interval — flights_tidy","text":"REGISTRATION: aircraft registration (spaces, dashes, ... stripped), e.g. GEUUU. AIRCRAFT_ADDRESS: ICAO 24-bit address airframe ADS-B/Mode S broadcasting. AIRCRAFT_TYPE_ICAO_ID: ICAO code aircraft type, example A30B Airbus -300B2-200. WK_TBL_CAT (see FPL Item 9): wake turbulence category, can L LIGHT, .e. maximum certificated takeoff mass 7000 kg (15_500 lbs) less. M MEDIUM, .e maximum certificated takeoff mass less 136_000 kg (300_000 lbs), 7_000 kg (15_500 lbs) H HEAVY, .e. maximum certificated takeoff mass 136_000 kg (300_000 lbs) (except specified J) J SUPER, presently AIRBUS -380-800","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"aircraft-operator-details","dir":"Reference","previous_headings":"","what":"Aircraft operator details","title":"Extract a clean flights list in an interval — flights_tidy","text":"AIRCRAFT_OPERATOR: ICAO Airline Designator, .e. OAL Olympic AO_GRP_CODE: Aircraft Operator group (code), .e. AEE_GRP AO_GRP_NAME: : Aircraft Operator group (name), .e. AEGEAN Group AO_ISO_CTRY_CODE: ISO country code AO","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"operational-details","dir":"Reference","previous_headings":"","what":"Operational details","title":"Extract a clean flights list in an interval — flights_tidy","text":"EOBT_1: Estimated -Block Time FPL-based (M1) trajectory ARVT_1: ARriVal Time FPL-based (M1) trajectory TAXI_TIME_1: Taxi time FPL-based (M1) trajectory AOBT_3: Actual -Block Time flown (M3) trajectory ARVT_3: ARVival Time flown (M3) trajectory TAXI_TIME_3: Taxi time flown (M3) trajectory RTE_LEN_1: route length (Nautical Miles) FPL-based (M1) trajectory RTE_LEN_3: route length (Nautical Miles) flown (M3) trajectory FLT_DUR_1: route duration (minutes) FPL-based (M1) trajectory FLT_DUR_3: route length (minutes) flown (M3) trajectory","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract a clean flights list in an interval — flights_tidy","text":"need either provide connection conn access SWH_FCT.DIM_FLIGHT_TYPE_RULE, PRUDEV.V_COVID_DIM_AO SWH_FCT.FAC_FLIGHT go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/flights_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a clean flights list in an interval — flights_tidy","text":"","code":"if (FALSE) { flts <- flights_tidy(wef = \"2023-01-01\", til = \"2023-01-05\") # other operations on flts, i.e. filtering, # followed by a collect() to retrieve the concrete data frame flts_filtered <- flts |>    filter(TO_DATE(\"2023-06-01 10:00\", \"YYYY-MM-DD HH24:MI\") <= IOBT,                   IOBT < TO_DATE(\"2023-01-02 10:30\", \"YYYY-MM-DD HH24:MI\")) |>    collect()  # NOTE: you can reuse the connection for other API calls conn <- flts$src$con  # other ops requiring conn # ...  # IMPORTANT: close the DB connection DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/member_state.html","id":null,"dir":"Reference","previous_headings":"","what":"EUROCONTROL's Member States — member_state","title":"EUROCONTROL's Member States — member_state","text":"data frame following fields name country name, e.g. \"Italy\" iso3c 3-letter ISO code, e.g. \"ITA\" iso2c 2-letter ISO code, e.g. \"\" icao 2-letter ICAO code, e.g. \"LI\" iso3n 3-digits ISO code, e.g. \"380\" date date status code, e.g. 1996-04-01 status status code, e.g. \"M\" (M Member State, C Comprehensive Agreement State, T Transitional State, NA Kosovo) useful grab right spatial polygons case need.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/member_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EUROCONTROL's Member States — member_state","text":"","code":"member_state"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/member_state.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EUROCONTROL's Member States — member_state","text":"object class tbl_df (inherits tbl, data.frame) 45 rows 7 columns.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/member_state.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"EUROCONTROL's Member States — member_state","text":"Kosovo also included list.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profile_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a reference to the Point Profile table — point_profile_tbl","title":"Return a reference to the Point Profile table — point_profile_tbl","text":"returned dplyr::tbl() referencing point profiles table PRISME. can use dplyr/dbplyr verbs filter, join, ... datasets.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profile_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a reference to the Point Profile table — point_profile_tbl","text":"","code":"point_profile_tbl(conn = NULL)"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profile_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a reference to the Point Profile table — point_profile_tbl","text":"conn Database connection instantiate default one.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profile_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a reference to the Point Profile table — point_profile_tbl","text":"dplyr::tbl() referencing Oracle table point profiles.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profile_tbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return a reference to the Point Profile table — point_profile_tbl","text":"need either provide connection conn access FSD.ALL_FT_POINT_PROFILE go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profile_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a reference to the Point Profile table — point_profile_tbl","text":"","code":"if (FALSE) { pt <- point_profile_tbl()  # if you re-use DB connections conn <- eurocontrol::db_connection(\"PRU_DEV\") pt <- point_profile_tbl(conn = conn)  # ... do something else with conn # ... # then manually close the connection to the DB DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profiles_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Export point profile from NM trajectories — point_profiles_tidy","title":"Export point profile from NM trajectories — point_profiles_tidy","text":"Extract NM point profile trajectories PRISME database. bbox defined, return (full) point profiles flights flying thru region.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profiles_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export point profile from NM trajectories — point_profiles_tidy","text":"","code":"point_profiles_tidy(   conn = NULL,   wef,   til = lubridate::today(tzone = \"UTC\"),   profile = \"CTFM\",   bbox = NULL )"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profiles_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export point profile from NM trajectories — point_profiles_tidy","text":"conn Database connection instantiate default one. wef EFfect date (included) Zulu time format recognized lubridate::as_datetime() til unTILl date (excluded) Zulu time format recognized lubridate::as_datetime() profile model trajectory profile (default: 'CTFM'), one : 'FTFM', Filed Tactical Flight Model 'RTFM', Regulated Tactical Flight Model 'CTFM', Current Tactical Flight Model 'CPF', Correlated Position reports Flight 'DCT', Direct route 'SCR', Shortest Constrained Route 'SRR', Shortest RAD restrictions applied Route 'SUR', Shortest Unconstrained Route bbox (Optional) axis aligned bounding box (xmin, ymin, xmax, ymax)","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profiles_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export point profile from NM trajectories — point_profiles_tidy","text":"dataframe representing flight trajectory following columns: FLIGHT_ID: unique identifier flight TIME_OVER: time llon/lat LONGITUDE: longitude LATITUDE: latitude FLIGHT_LEVEL: flight level POINT_ID: published point ID ('NO_POINT' otherwise) AIR_ROUTE: air rout name ('DCT' otherwise) LOBT: last -block time SEQ_ID: progressive sequence number trajectory points CALLSIGN: callsign flight REGISTRATION: aircraft registration MODEL_TYPE: trajectory model per profile input parameter AIRCRAFT_TYPE: ICAO aircraft type AIRCRAFT_OPERATOR: flight operator ICAO24: ICAO 24-bit address aircraft ADEP: Aerodrom Departure ADES: aerodrome Destination","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profiles_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Export point profile from NM trajectories — point_profiles_tidy","text":"need either provide connection conn access noted airspace_profile_tbl() flights_tidy() go default uses PRU_DEV establish db_connection().","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/reference/point_profiles_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export point profile from NM trajectories — point_profiles_tidy","text":"","code":"if (FALSE) { # export 1 day of NM (planned) trajectories pf1 <- point_profiles_tidy(wef = \"2019-07-14\",                            til = \"2019-07-15\",                            profile = \"FTFM\")  # export 2 hours of NM (flown) trajectories pf2 <- point_profiles_tidy(wef = \"2019-07-14 22:00\",                            til = \"2019-07-15\")  # export 1 day of NM (flown) trajectories pf3 <- point_profiles_tidy(wef = \"2019-07-14\",                            til = \"2019-07-15\",                            profile = \"CTFM\")  # export all CTFM trajectories within a bounding box 40 NM around EDDF bb <- c(xmin = 7.536746, xmax = 9.604390, ymin = 49.36732, ymax = 50.69920) pf4 <- point_profiles_tidy(wef = \"2019-01-01 00:00\",                            til = \"2019-01-02 00:00\",                            bbox = bb)   # if you re-use DB connections conn <- eurocontrol::db_connection(\"PRU_DEV\") pf <- point_profiles_tidy(conn = conn,                           wef = \"2020-01-01\",                           til = \"2020-01-10\")  # ... do something else with conn # ... # then manually close the connection to the DB DBI::dbDisconnect(conn) }"},{"path":"https://eurocontrol.github.io/eurocontrol/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://eurocontrol.github.io/eurocontrol/news/index.html","id":"eurocontrol-011","dir":"Changelog","previous_headings":"","what":"eurocontrol 0.1.1","title":"eurocontrol 0.1.1","text":"Added AODF access. Added point profiles. Follow dbplyr naming convention DB connection, .e. conn instead con.","code":""},{"path":"https://eurocontrol.github.io/eurocontrol/news/index.html","id":"eurocontrol-010","dir":"Changelog","previous_headings":"","what":"eurocontrol 0.1.0","title":"eurocontrol 0.1.0","text":"Initial viable version.","code":""}]
